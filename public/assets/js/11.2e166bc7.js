(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{58:function(t,v,r){"use strict";r.r(v);var _={props:["slot-key"],mounted(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},e=r(1),a=Object(e.a)(_,function(){var t=this,v=t.$createElement,r=t._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.slotKey}},[r("h3",{attrs:{id:"汇编基本语法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#汇编基本语法","aria-hidden":"true"}},[t._v("#")]),t._v(" 汇编基本语法")]),t._v(" "),r("p",[t._v("用于 JOS 这个操作系统实验的汇编，语法和 "),r("code",[t._v("intel")]),t._v(" 的汇编语法有所不同，它的风格是 "),r("code",[t._v("GAS style")]),t._v(" 的。x86汇编的内容非常多，想要用一篇指南去全部介绍 x86 汇编基本上是不可能的，所以这个指南将会介绍那些重要且较为简单的汇编知识。")]),t._v(" "),r("h3",{attrs:{id:"寄存器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#寄存器","aria-hidden":"true"}},[t._v("#")]),t._v(" 寄存器")]),t._v(" "),r("p",[t._v("汇编中最重要的一个部分是寄存器，下面的表格列出了一些重要的寄存器和它们基本的用法。一个比较有趣的事情是下面中的 "),r("em",[t._v("调用者保护")]),t._v(" 和 "),r("em",[t._v("被调用者保护")]),t._v(" 这两个属性。下面用一个例子简要介绍这两个属性，假设有 2 个函数 A 和 B，A 如果调用了 B，那么 A 被称为调用者，B 被称为被调用者。对于 A 来说，他需要时刻注意那些 "),r("em",[t._v("调用者保护")]),t._v(" 的寄存器，如果 A 要使用这些寄存器，比如 "),r("code",[t._v("%eax")]),t._v("（函数返回值），他应该先将它们保存在内存（通常是栈）中，否则可能因为修改了寄存器的值而导致返回值改变。这个部分的内容相信大家在学习编译原理的活动记录后会理解得更好。(实验中使用的是 32 位汇编，不过这里列出的是 64 位的寄存器表，对应的寄存器可以用 32 位那一列进行转换)")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("寄存器")]),t._v(" "),r("th",[t._v("通常的功能")]),t._v(" "),r("th",[t._v("低16位")]),t._v(" "),r("th",[t._v("低8位")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("%rax")]),t._v(" "),r("td",[t._v("函数返回值，调用者保护")]),t._v(" "),r("td",[t._v("%eax")]),t._v(" "),r("td",[t._v("%ax")])]),t._v(" "),r("tr",[r("td",[t._v("%rdi")]),t._v(" "),r("td",[t._v("第一个函数参量，调用者保护")]),t._v(" "),r("td",[t._v("%edi")]),t._v(" "),r("td",[t._v("%di")])]),t._v(" "),r("tr",[r("td",[t._v("%rsi")]),t._v(" "),r("td",[t._v("第二个函数参量，调用者保护")]),t._v(" "),r("td",[t._v("%esi")]),t._v(" "),r("td",[t._v("%si")])]),t._v(" "),r("tr",[r("td",[t._v("%rdx")]),t._v(" "),r("td",[t._v("第三个函数参量，调用者保护")]),t._v(" "),r("td",[t._v("%edx")]),t._v(" "),r("td",[t._v("%dx")])]),t._v(" "),r("tr",[r("td",[t._v("%rcx")]),t._v(" "),r("td",[t._v("第四个函数参量，调用者保护")]),t._v(" "),r("td",[t._v("%ecx")]),t._v(" "),r("td",[t._v("%cx")])]),t._v(" "),r("tr",[r("td",[t._v("%r8")]),t._v(" "),r("td",[t._v("第五个函数参量，调用者保护")]),t._v(" "),r("td",[t._v("%r8d")]),t._v(" "),r("td",[t._v("%r8w")])]),t._v(" "),r("tr",[r("td",[t._v("%r9")]),t._v(" "),r("td",[t._v("第六个函数参量，调用者保护")]),t._v(" "),r("td",[t._v("%r9d")]),t._v(" "),r("td",[t._v("%r9w")])]),t._v(" "),r("tr",[r("td",[t._v("%rsp")]),t._v(" "),r("td",[t._v("栈指针，被调用者保护")]),t._v(" "),r("td",[t._v("%esp")]),t._v(" "),r("td",[t._v("%sp")])]),t._v(" "),r("tr",[r("td",[t._v("%rbx")]),t._v(" "),r("td",[t._v("临时变量，被调用者保护")]),t._v(" "),r("td",[t._v("%ebx")]),t._v(" "),r("td",[t._v("%bx")])]),t._v(" "),r("tr",[r("td",[t._v("%rbp")]),t._v(" "),r("td",[t._v("通常记录上一个栈指针，被调用者保护")]),t._v(" "),r("td",[t._v("%ebp")]),t._v(" "),r("td",[t._v("%bp")])]),t._v(" "),r("tr",[r("td",[t._v("%r12")]),t._v(" "),r("td",[t._v("临时变量，被调用者保护")]),t._v(" "),r("td",[t._v("%r12d")]),t._v(" "),r("td",[t._v("%r12w")])]),t._v(" "),r("tr",[r("td",[t._v("%r13")]),t._v(" "),r("td",[t._v("临时变量，被调用者保护")]),t._v(" "),r("td",[t._v("%r13d")]),t._v(" "),r("td",[t._v("%r13w")])]),t._v(" "),r("tr",[r("td",[t._v("%r14")]),t._v(" "),r("td",[t._v("临时变量，被调用者保护")]),t._v(" "),r("td",[t._v("%r14d")]),t._v(" "),r("td",[t._v("%r14w")])]),t._v(" "),r("tr",[r("td",[t._v("%r15")]),t._v(" "),r("td",[t._v("临时变量，被调用者保护")]),t._v(" "),r("td",[t._v("%r15d")]),t._v(" "),r("td",[t._v("%r15w")])]),t._v(" "),r("tr",[r("td",[t._v("%rip")]),t._v(" "),r("td",[t._v("程序指令指针")]),t._v(" "),r("td"),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("%eflags")]),t._v(" "),r("td",[t._v("记录条件和状态")]),t._v(" "),r("td"),t._v(" "),r("td")])])]),t._v(" "),r("p",[t._v("另外，在不同的编译器中，"),r("em",[t._v("调用者保护")]),t._v(" 和 "),r("em",[t._v("被调用者保护")]),t._v(" 这两个属性可能会有所不同， "),r("code",[t._v("gcc")]),t._v(" 是符合上表所述的，但是在微软的官方文档中却并不是这样，其中一个差别是， 它把 %rdi 和 %rsi 作为 "),r("em",[t._v("被调用者保护")]),t._v(" 寄存器。")]),t._v(" "),r("h3",{attrs:{id:"寻址模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#寻址模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 寻址模式")]),t._v(" "),r("p",[t._v("寻址的主要目的是找到对应的内存，下面以 "),r("code",[t._v("mov")]),t._v(" 指令为例，列举 x86 中常见的几种寻址模式")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("movl $1, 0x604892         # 直接寻址，0x604892的位置填入立即数1\nmovl $1, (%rax)           # 间接寻址，在 %rax 寄存器这个值的地址填入立即数1\n\nmovl $1, -24(%rbp)        # 间接寻址，在 %rbp - 24 这个地址填入立即数1\n\nmovl $1, 8(%rsp, %rdi, 4) # 间接寻址，在 %rsp + 8 + %rdi*4 这个地址填入立即数1\n\nmovl $1, (%rax, %rcx, 8)  # 间接寻址，在 %rax + %rcx*8 这个地址填入立即数1\n\nmovl $1, 0x8(, %rdx, 4)   # 间接寻址，在 0x8 + %rcx*4 这个地址填入立即数1\n\nmovl $1, 0x4(%rax, %rcx)  # 间接寻址，在 %rax + 0x4 + %rcx*1 这个地址填入立即数1\n")])])]),r("h3",{attrs:{id:"基本指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本指令","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本指令")]),t._v(" "),r("h4",{attrs:{id:"指令后缀"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#指令后缀","aria-hidden":"true"}},[t._v("#")]),t._v(" 指令后缀")]),t._v(" "),r("p",[t._v("在实验中很多汇编指令都是带一个后缀的，比如 "),r("code",[t._v("b")]),t._v(", "),r("code",[t._v("w")]),t._v(", "),r("code",[t._v("l")]),t._v(", "),r("code",[t._v("q")]),t._v("， 它们的意思分别是操作的数据单元大小是 1，2，4，8 bytes。")]),t._v(" "),r("p",[t._v("当然也有一些特殊的指令带有 2 个后缀，比如 "),r("code",[t._v("movs")]),t._v(" 和 "),r("code",[t._v("movz")]),t._v("，具体它们的意思可以在 "),r("a",{attrs:{href:"https://en.wikibooks.org/wiki/X86_Assembly/Data_Transfer",target:"_blank",rel:"noopener noreferrer"}},[t._v("x86百科"),r("OutboundLink")],1),t._v(" 中查到")]),t._v(" "),r("h4",{attrs:{id:"通常指令的格式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#通常指令的格式","aria-hidden":"true"}},[t._v("#")]),t._v(" 通常指令的格式")]),t._v(" "),r("p",[t._v("汇编通常指令基本可以按照操作数的数量来划分。比如下面的无操作数指令格式：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Instr\n")])])]),r("p",[t._v("有一个操作数的指令格式：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Instr arg\n")])])]),r("p",[t._v("有两个操作数的指令格式如下，大部分的这些指令都要求2个操作数必须至少有一个是立即数或寄存器。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Instr src, dest\n")])])]),r("p",[t._v("有三个操作数的指令格式如下")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Instr aux, src, dest\n")])])]),r("h4",{attrs:{id:"mov和lea"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mov和lea","aria-hidden":"true"}},[t._v("#")]),t._v(" Mov和Lea")]),t._v(" "),r("p",[t._v("下面直接用例子介绍这两个的指令用法和区别。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("mov src, dest        # 意思就是 dest = src\nmov $0, %eax         # %eax = 0\nmovl %eax, 0x233     # 将%eax的值填入0x233这个地址\nmovl 8(%rsp), %eax   # %eax = %rsp + 8 这个地址存放的数据的值\n\nlea src, dest        # dest = src 的地址\nlea 0x20(%rsp), %eax # %eax = %rsp + 0x20  (可以与上面的mov比较)\n")])])]),r("h4",{attrs:{id:"基本的算术运算"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本的算术运算","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本的算术运算")]),t._v(" "),r("p",[t._v("这里也直接给出一些简单的例子，更详细的说明可以在"),r("a",{attrs:{href:"https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),r("OutboundLink")],1),t._v("查到。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("add src, dst       # dst += src\nsub src, dst       # dst -= src\nimul src, dst      # dst *= src\nneg dst            # dst = -dst\n\nand src, dst       # dst &= src\nor src, dst        # dst |= src\nxor src, dst       # dst ^= src\nnot dst            # dst = ~dst\n")])])]),r("h4",{attrs:{id:"基本的控制指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本的控制指令","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本的控制指令")]),t._v(" "),r("p",[t._v("控制指令主要就是各种跳转和设置标志位状态的一些指令，想要了解标志位具体的设置方式和介绍可以参考"),r("a",{attrs:{href:"https://en.wikibooks.org/wiki/X86_Assembly/Control_Flow",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("cmpl op2, op1    # 根据 op1 - op2 的结果设置标志位状态\ntest op2, op1    # 根据 op1 & op2 的结果设置标志位状态\n\njmp target    # 无条件跳转\nje  target    # 相等时跳转 (ZF=1)\njne target    # 不等时跳转 (ZF=0)\njl  target    # 小于时跳转 (SF!=OF)\njle target    # 小于等于时跳转 (ZF=1 or SF!=OF)\njg  target    # 大于时跳转 (ZF=0 and SF=OF)\njge target    # 大于等于时跳转 (SF=OF)\nja  target    # 无符号比较大于时跳转 (CF=0 and ZF=0)\njb  target    # 无符号比较小于时跳转 (CF=1)\njs  target    # 有符号时跳转 (SF=1)\njns target    # 无符号时跳转 (SF=0)\n")])])]),r("h4",{attrs:{id:"基本的栈指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本的栈指令","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本的栈指令")]),t._v(" "),r("p",[t._v("在x86汇编中，"),r("code",[t._v("%rsp")]),t._v(" 通常是栈指针（32位里是 "),r("code",[t._v("%esp")]),t._v("），栈对应的操作有 "),r("code",[t._v("pop")]),t._v(" 和 "),r("code",[t._v("push")]),t._v(" 两种。 "),r("code",[t._v("push")]),t._v(" 指令有一个操作数，它会把这个操作数压入到栈里，并且会使栈指针递减。"),r("code",[t._v("pop")]),t._v(" 指令也有一个操作数，它把栈顶的元素弹出并放到这个操作数中，同样，它会使栈指针递增。另外，还有下列的一些特殊的栈指令。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("pushf     # 将标志寄存器压入栈中\npusha     # 将AX, CX, DX, BX, SP, BP, SI, DI压入栈中，如果指令是pushal那么将压入8个32位寄存器。\npopf      # 将栈顶的元素弹出并填充到标志寄存器中\npopa      # 依次弹出8个元素，并依序填入到DI, SI, BP, SP, BX, DX, CX, AX这8个寄存器中。\n")])])]),r("h4",{attrs:{id:"基本的函数指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本的函数指令","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本的函数指令")]),t._v(" "),r("p",[t._v("基本的函数指令就是 "),r("code",[t._v("call")]),t._v(" 和 "),r("code",[t._v("ret")]),t._v(" 这两个了。 "),r("code",[t._v("call")]),t._v(" 会把当前指令(%eip)的下一条指令的地址压入栈里，然后跳转到函数的入口。"),r("code",[t._v("ret")]),t._v(" 会取出栈顶的元素并把它赋值给 %eip，之后继续执行代码。"),r("code",[t._v("ret")]),t._v(" 也是可以有操作数的，不过它并不表示返回值，而是代表在给 %eip 赋值后继续弹出多少个数。")]),t._v(" "),r("h4",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://web.stanford.edu/class/cs107/guide/x86-64.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("斯坦福大学计算机组成原理课的汇编部分介绍"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://en.wikibooks.org/wiki/X86_Assembly",target:"_blank",rel:"noopener noreferrer"}},[t._v("x86汇编百科"),r("OutboundLink")],1)])]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("作者： Saurus (jia1Saurus@gmail.com)")]),t._v(" "),r("p",[t._v("如果有错误，请务必指出，以便及时更正")])])},[],!1,null,null,null);a.options.__file="assemble.md";v.default=a.exports}}]);